/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.zolotko.intellij.unison.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.zolotko.intellij.unison.language.psi.UnisonElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_UnisonLexer.flex</tt>
 */
public class _UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14304 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\141\1\24\45"+
    "\12\1\142\1\12\1\24\1\27\4\12\1\27\1\143\1\144\1\15\1\12\1\15\1\12\1\15\1"+
    "\144\1\70\3\12\1\145\1\1\1\146\1\114\2\1\1\114\5\12\1\26\1\147\1\12\1\150"+
    "\4\12\1\37\1\12\1\151\2\1\1\64\1\12\1\152\1\153\2\12\1\154\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\153\2\1\2\114\1\155\5\1\1\107\2\12\1\145\1\156\1\114"+
    "\2\1\1\157\1\12\1\160\1\41\2\12\1\37\1\1\2\12\1\145\1\1\1\161\1\41\1\12\1"+
    "\152\1\45\5\1\1\162\1\163\14\12\4\1\21\12\1\141\2\12\1\141\1\164\1\12\1\152"+
    "\3\12\1\165\1\166\1\167\1\124\1\166\7\1\1\170\1\1\1\124\6\1\1\171\1\172\1"+
    "\173\1\174\1\175\3\1\1\176\7\1\1\177\137\1\2\12\1\151\2\12\1\151\10\12\1\200"+
    "\1\201\2\12\1\133\3\12\1\202\1\1\1\12\1\112\4\203\4\1\1\126\35\1\1\204\2\1"+
    "\1\205\1\24\4\12\1\206\1\24\4\12\1\134\1\107\1\12\1\152\1\24\4\12\1\151\1"+
    "\1\1\12\1\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1"+
    "\2\12\1\152\20\12\1\124\1\12\1\207\1\1\2\12\1\151\1\126\1\12\1\152\4\12\1"+
    "\37\2\1\1\210\1\211\5\12\1\212\1\12\1\151\1\26\3\1\1\210\1\213\1\12\1\30\1"+
    "\1\3\12\1\145\1\211\2\12\1\145\1\1\1\114\1\1\1\214\1\41\1\12\1\37\1\12\1\112"+
    "\1\1\1\12\1\124\1\47\2\12\1\30\1\126\1\114\1\215\1\216\2\12\1\45\1\1\1\217"+
    "\1\114\1\12\1\220\3\12\1\221\1\222\1\223\1\27\1\65\1\224\1\225\1\203\2\12"+
    "\1\134\1\37\7\12\1\30\1\114\72\12\1\145\1\12\1\226\2\12\1\154\20\1\26\12\1"+
    "\152\6\12\1\76\2\1\1\112\1\227\1\55\1\230\1\231\6\12\1\15\1\1\1\157\25\12"+
    "\1\152\1\1\4\12\1\211\2\12\1\26\2\1\1\154\7\1\1\215\7\12\1\124\1\1\1\114\1"+
    "\24\1\27\1\24\1\27\1\232\4\12\1\151\1\233\1\234\2\1\1\235\1\12\1\13\1\236"+
    "\2\152\2\1\7\12\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\237\2\12"+
    "\1\37\1\12\1\152\2\12\1\240\3\1\11\12\1\152\1\114\2\12\1\240\1\12\1\154\2"+
    "\12\1\26\3\12\1\145\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\241\2\12\1\242"+
    "\1\12\1\37\1\12\1\112\1\12\1\151\4\1\1\12\1\243\1\12\1\37\1\12\1\76\4\1\3"+
    "\12\1\244\4\1\1\70\1\245\1\12\1\145\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1"+
    "\12\1\153\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3"+
    "\12\1\30\3\12\1\30\60\1\1\157\2\12\1\26\2\1\1\64\1\1\1\157\2\12\2\1\1\12\1"+
    "\45\1\114\1\157\1\12\1\112\1\64\1\1\2\12\1\246\1\157\2\12\1\30\1\247\1\250"+
    "\2\1\1\12\1\21\1\154\5\1\1\251\1\252\1\45\2\12\1\151\1\1\1\114\1\72\1\54\1"+
    "\55\1\67\1\1\1\253\1\15\11\1\3\12\1\153\1\254\1\114\2\1\3\12\1\1\1\255\1\114"+
    "\12\1\2\12\1\151\2\1\1\256\2\1\3\12\1\1\1\257\1\114\2\1\2\12\1\27\1\1\1\114"+
    "\3\1\1\12\1\76\1\1\1\114\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1"+
    "\12\1\151\1\1\1\70\1\114\1\1\1\211\1\12\67\1\71\12\1\76\16\1\14\12\1\145\53"+
    "\1\2\12\1\151\75\1\44\12\1\112\33\1\43\12\1\45\1\12\1\151\1\114\6\1\1\12\1"+
    "\152\1\1\3\12\1\1\1\145\1\114\1\157\1\260\1\12\67\1\4\12\1\153\1\70\3\1\1"+
    "\157\4\1\1\70\1\1\76\12\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124"+
    "\1\45\1\76\66\1\5\12\1\215\3\12\1\144\1\261\1\262\1\263\3\12\1\264\1\265\1"+
    "\12\1\266\1\267\1\35\24\12\1\270\1\12\1\35\1\134\1\12\1\134\1\12\1\215\1\12"+
    "\1\215\1\151\1\12\1\151\1\12\1\55\1\12\1\55\1\12\1\271\3\272\14\12\1\153\3"+
    "\1\4\12\1\145\1\114\112\1\1\263\1\12\1\273\1\274\1\275\1\276\1\277\1\300\1"+
    "\301\1\154\1\302\1\154\24\1\55\12\1\112\2\1\103\12\1\153\15\12\1\152\150\12"+
    "\1\15\25\1\41\12\1\152\36\1");

  /* The ZZ_CMAP_A table has 3120 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\70\1\5\3\0\1\66\1\7\1\57\1\60\1\73\1"+
    "\72\1\56\1\67\1\46\1\0\12\10\1\54\2\0\1\64\1\52\1\0\1\42\2\14\1\50\10\14\1"+
    "\51\6\14\1\43\1\14\1\47\5\14\1\53\1\6\1\55\1\0\1\13\1\71\1\26\1\32\1\25\1"+
    "\40\1\21\1\37\1\41\1\34\1\17\1\14\1\44\1\27\1\35\1\16\1\36\1\31\1\20\1\24"+
    "\1\22\1\23\1\15\1\12\1\33\1\45\1\30\1\14\1\61\1\65\1\62\14\0\1\11\12\0\1\11"+
    "\4\0\1\11\5\0\27\11\1\0\12\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11\1\0\5"+
    "\11\1\0\2\11\2\0\4\11\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\4\11\1\0\23"+
    "\11\1\0\13\11\10\0\6\11\1\0\26\11\2\0\1\11\6\0\10\11\10\0\13\11\5\0\3\11\15"+
    "\0\12\4\4\0\6\11\1\0\1\11\17\0\2\11\7\0\2\11\12\4\3\11\2\0\2\11\1\0\16\11"+
    "\15\0\11\11\13\0\1\11\16\0\12\4\6\11\4\0\2\11\4\0\1\11\5\0\6\11\4\0\1\11\11"+
    "\0\1\11\3\0\1\11\7\0\11\11\7\0\5\11\1\0\10\11\6\0\26\11\3\0\1\11\2\0\1\11"+
    "\7\0\12\11\4\0\12\4\1\11\4\0\10\11\2\0\2\11\2\0\26\11\1\0\7\11\1\0\1\11\3"+
    "\0\4\11\3\0\1\11\20\0\1\11\15\0\2\11\1\0\1\11\5\0\6\11\4\0\2\11\1\0\2\11\1"+
    "\0\2\11\1\0\2\11\17\0\4\11\1\0\1\11\7\0\12\4\2\0\3\11\20\0\11\11\1\0\2\11"+
    "\1\0\2\11\1\0\5\11\3\0\1\11\2\0\1\11\30\0\1\11\13\0\10\11\2\0\1\11\3\0\1\11"+
    "\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3"+
    "\0\14\11\13\0\10\11\1\0\2\11\10\0\3\11\5\0\1\11\4\0\10\11\1\0\6\11\1\0\5\11"+
    "\3\0\1\11\3\0\2\11\15\0\13\11\2\0\1\11\6\0\3\11\10\0\1\11\12\0\6\11\5\0\22"+
    "\11\3\0\10\11\1\0\11\11\1\0\1\11\2\0\7\11\11\0\1\11\1\0\2\11\14\0\12\4\7\0"+
    "\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11\1\0\3\11\1\0\1"+
    "\11\1\0\1\11\2\0\2\11\1\0\4\11\1\0\2\11\11\0\1\11\2\0\5\11\1\0\1\11\11\0\12"+
    "\4\2\0\14\11\1\0\24\11\13\0\5\11\22\0\7\11\4\0\4\11\3\0\1\11\3\0\2\11\7\0"+
    "\3\11\4\0\15\11\14\0\1\11\1\0\6\11\1\0\1\11\5\0\1\11\2\0\13\11\1\0\15\11\1"+
    "\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11\2\0\1\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0"+
    "\4\11\2\0\16\11\2\0\6\11\2\0\15\11\2\0\1\11\1\0\10\11\7\0\15\11\1\0\6\11\23"+
    "\0\1\11\4\0\1\11\3\0\5\11\2\0\22\11\1\0\1\11\5\0\17\11\1\0\16\11\2\0\5\11"+
    "\13\0\14\11\13\0\1\11\15\0\7\11\7\0\16\11\15\0\2\11\12\4\3\0\3\11\11\0\4\11"+
    "\1\0\4\11\3\0\2\11\11\0\10\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\6\11\1\0\7\11"+
    "\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\5\0\1\11\15\0\1\11\2\0\1\11"+
    "\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11"+
    "\1\0\13\11\2\0\4\11\5\0\5\11\4\0\1\11\4\0\2\11\13\0\1\63\17\0\5\11\6\0\4\11"+
    "\3\0\2\11\14\0\10\11\7\0\10\11\1\0\7\11\6\0\2\11\12\0\5\11\5\0\2\11\3\0\7"+
    "\11\6\0\3\11\12\4\2\11\13\0\11\11\2\0\27\11\2\0\7\11\1\0\3\11\1\0\4\11\1\0"+
    "\4\11\2\0\6\11\3\0\1\11\1\0\1\11\2\0\5\11\1\0\12\11\12\4\5\11\1\0\3\11\1\0"+
    "\10\11\4\0\7\11\3\0\1\11\3\0\2\11\1\0\1\11\3\0\2\11\2\0\5\11\2\0\1\11\1\0"+
    "\1\11\30\0\3\11\3\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\4\0\5\11\3\0\5\11\5\0"+
    "\1\11\1\0\10\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0\12\11\6\0\12\11\2"+
    "\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0\14\11\1\0\16\11\1\0\2\11\1\0\2\11\1"+
    "\0\10\11\6\0\4\11\4\0\16\11\2\0\1\11\1\0\14\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\1\0\2\11\12\0\10\11\6\0\6\11\1\0\3\11\1\0\12\11\3\0\1\11\12\0\4\11\13\0\12"+
    "\4\1\11\1\0\1\11\3\0\7\11\1\0\1\11\1\0\4\11\1\0\17\11\1\0\2\11\14\0\3\11\7"+
    "\0\4\11\11\0\2\11\1\0\1\11\20\0\4\11\10\0\1\11\13\0\10\11\5\0\3\11\2\0\1\11"+
    "\2\0\2\11\2\0\4\11\1\0\14\11\1\0\1\11\1\0\7\11\1\0\21\11\1\0\4\11\2\0\10\11"+
    "\1\0\7\11\1\0\14\11\1\0\4\11\1\0\5\11\1\0\1\11\3\0\14\11\2\0\13\11\1\0\10"+
    "\11\2\0\22\4\1\0\2\11\1\0\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0\1"+
    "\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0\4\11\1\0\7\11\1"+
    "\0\4\11\1\0\4\11\1\0\1\11\1\0\12\11\1\0\5\11\1\0\3\11\1\0\5\11\1\0\5\11");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\14\6\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\1\26\1\27\1\30\1\31\1\32\1\0\1\33"+
    "\1\0\3\6\1\34\23\6\4\0\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\0\1\33\1\6\1\44"+
    "\25\6\4\0\1\45\3\6\1\46\6\6\1\47\1\50"+
    "\1\51\3\6\1\52\5\6\4\0\7\6\1\53\2\6"+
    "\1\54\2\6\1\55\1\56\1\6\1\57\1\6\1\0"+
    "\1\60\2\0\1\61\5\6\1\62\3\6\1\63\1\6"+
    "\1\64\3\0\1\65\3\6\1\0\2\6\1\66\1\6"+
    "\3\0\1\67\2\6\1\0\1\70\1\71\1\6\3\0"+
    "\1\72\1\6\1\0\1\73\3\0\1\74\2\0\1\75"+
    "\1\76\20\0\1\77\1\100\10\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\74\0\74\0\264\0\360\0\74"+
    "\0\u012c\0\74\0\u0168\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\74"+
    "\0\74\0\u0474\0\u04b0\0\74\0\74\0\74\0\74\0\u04ec"+
    "\0\u0528\0\74\0\74\0\u0564\0\u05a0\0\u05dc\0\74\0\74"+
    "\0\74\0\74\0\360\0\74\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u012c\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\u0c6c"+
    "\0\360\0\u0ca8\0\u012c\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\74\0\u12c0\0\u12fc\0\u1338"+
    "\0\u012c\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u012c"+
    "\0\u14dc\0\u012c\0\u1518\0\u1554\0\u1590\0\u012c\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\74\0\u198c"+
    "\0\u19c8\0\u012c\0\u1a04\0\u1a40\0\u012c\0\u012c\0\u1a7c\0\u012c"+
    "\0\u1ab8\0\u1af4\0\74\0\u1b30\0\u1b6c\0\u012c\0\u1ba8\0\u1be4"+
    "\0\u1c20\0\u1c5c\0\u1c98\0\u012c\0\u1cd4\0\u1d10\0\u1d4c\0\u012c"+
    "\0\u1d88\0\u012c\0\u1dc4\0\u1e00\0\u1e3c\0\u012c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u012c\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u012c\0\u20d0\0\u210c\0\u2148\0\u012c\0\u012c\0\u2184"+
    "\0\u21c0\0\u21fc\0\u2238\0\u012c\0\u2274\0\u22b0\0\u012c\0\u22ec"+
    "\0\u2328\0\u2364\0\u012c\0\u23a0\0\u23dc\0\74\0\74\0\u2418"+
    "\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c\0\74"+
    "\0\74\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940"+
    "\0\u297c\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\6\2\11\1\12\1\11\1\13\1\11\1\14\1\11"+
    "\1\15\1\16\1\17\1\11\1\20\1\21\1\22\3\11"+
    "\1\23\1\11\1\24\1\25\1\26\2\11\1\27\3\11"+
    "\1\30\3\11\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\76\0\1\4\75\0\1\6"+
    "\3\0\1\6\63\0\5\53\1\54\1\55\65\53\10\0"+
    "\1\11\1\0\30\11\1\0\3\11\1\0\3\11\32\0"+
    "\1\11\1\0\4\11\1\56\3\11\1\57\17\11\1\0"+
    "\3\11\1\0\3\11\32\0\1\11\1\0\4\11\1\60"+
    "\20\11\1\61\2\11\1\0\3\11\1\0\3\11\32\0"+
    "\1\11\1\0\1\62\14\11\1\63\12\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\5\11\1\64\3\11"+
    "\1\65\4\11\1\66\5\11\1\67\3\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\7\11\1\70\2\11"+
    "\1\71\3\11\1\72\3\11\1\73\5\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\14\11\1\74\13\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\20\11"+
    "\1\75\7\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\14\11\1\76\13\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\5\11\1\77\14\11\1\100\5\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\14\11"+
    "\1\101\13\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\11\11\1\102\16\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\14\11\1\103\7\11\1\104\3\11"+
    "\1\0\3\11\1\0\3\11\41\0\1\105\1\0\1\106"+
    "\1\107\1\110\124\0\1\111\74\0\1\112\77\0\1\113"+
    "\74\0\1\114\76\0\1\115\74\0\1\116\57\0\1\117"+
    "\14\0\1\120\4\0\5\53\1\121\1\55\65\53\10\0"+
    "\1\11\1\0\5\11\1\122\22\11\1\0\3\11\1\0"+
    "\3\11\32\0\1\11\1\0\7\11\1\123\20\11\1\0"+
    "\3\11\1\0\3\11\32\0\1\11\1\0\13\11\1\124"+
    "\14\11\1\0\3\11\1\0\3\11\32\0\1\11\1\0"+
    "\14\11\1\125\13\11\1\0\3\11\1\0\3\11\32\0"+
    "\1\11\1\0\10\11\1\126\17\11\1\0\3\11\1\0"+
    "\3\11\32\0\1\11\1\0\27\11\1\127\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\12\11\1\130\15\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\4\11"+
    "\1\131\23\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\3\11\1\132\24\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\10\11\1\133\1\11\1\134\15\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\3\11"+
    "\1\135\24\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\17\11\1\136\10\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\7\11\1\137\20\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\10\11\1\140\17\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\5\11"+
    "\1\141\22\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\23\11\1\142\4\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\11\11\1\143\16\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\7\11\1\144\20\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\11\11"+
    "\1\145\16\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\22\11\1\146\5\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\15\11\1\147\12\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\12\11\1\150\15\11"+
    "\1\0\3\11\1\0\3\11\40\0\1\151\67\0\1\152"+
    "\100\0\1\153\104\0\1\154\132\0\1\155\14\0\1\11"+
    "\1\0\6\11\1\156\21\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\15\11\1\157\12\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\15\11\1\160\12\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\7\11"+
    "\1\161\20\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\4\11\1\162\23\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\3\11\1\163\24\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\11\11\1\164\16\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\12\11"+
    "\1\165\15\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\11\11\1\166\16\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\23\11\1\167\4\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\7\11\1\170\20\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\7\11"+
    "\1\171\20\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\4\11\1\172\23\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\7\11\1\173\20\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\15\11\1\174\12\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\20\11"+
    "\1\175\7\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\22\11\1\176\5\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\12\11\1\177\15\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\13\11\1\200\14\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\7\11"+
    "\1\201\20\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\10\11\1\202\17\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\14\11\1\203\13\11\1\0\3\11"+
    "\1\0\3\11\51\0\1\204\72\0\1\205\106\0\1\206"+
    "\63\0\1\207\52\0\1\11\1\0\3\11\1\210\24\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\3\11"+
    "\1\211\24\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\3\11\1\212\24\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\14\11\1\213\13\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\13\11\1\214\14\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\14\11"+
    "\1\215\13\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\13\11\1\216\14\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\30\11\1\0\3\11\1\0\3\11"+
    "\1\217\31\0\1\11\1\0\30\11\1\0\3\11\1\0"+
    "\2\11\1\220\32\0\1\11\1\0\30\11\1\0\3\11"+
    "\1\0\2\11\1\221\32\0\1\11\1\0\10\11\1\222"+
    "\17\11\1\0\3\11\1\0\3\11\32\0\1\11\1\0"+
    "\5\11\1\223\22\11\1\0\3\11\1\0\3\11\32\0"+
    "\1\11\1\0\26\11\1\224\1\11\1\0\3\11\1\0"+
    "\3\11\32\0\1\11\1\0\7\11\1\225\20\11\1\0"+
    "\3\11\1\0\3\11\32\0\1\11\1\0\22\11\1\226"+
    "\5\11\1\0\3\11\1\0\3\11\32\0\1\11\1\0"+
    "\12\11\1\227\15\11\1\0\3\11\1\0\3\11\32\0"+
    "\1\11\1\0\7\11\1\230\20\11\1\0\3\11\1\0"+
    "\3\11\32\0\1\11\1\0\15\11\1\231\12\11\1\0"+
    "\3\11\1\0\3\11\41\0\1\232\103\0\1\233\62\0"+
    "\1\234\76\0\1\235\62\0\1\11\1\0\7\11\1\236"+
    "\20\11\1\0\3\11\1\0\3\11\32\0\1\11\1\0"+
    "\26\11\1\237\1\11\1\0\3\11\1\0\3\11\32\0"+
    "\1\11\1\0\14\11\1\240\13\11\1\0\3\11\1\0"+
    "\3\11\32\0\1\11\1\0\11\11\1\241\16\11\1\0"+
    "\3\11\1\0\3\11\32\0\1\11\1\0\11\11\1\242"+
    "\16\11\1\0\3\11\1\0\3\11\32\0\1\11\1\0"+
    "\30\11\1\0\2\11\1\243\1\0\3\11\32\0\1\11"+
    "\1\0\7\11\1\244\20\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\5\11\1\245\22\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\5\11\1\246\22\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\11\11"+
    "\1\247\16\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\14\11\1\250\13\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\21\11\1\251\6\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\15\11\1\252\12\11"+
    "\1\0\3\11\1\0\3\11\40\0\1\253\103\0\1\254"+
    "\72\0\1\255\56\0\1\11\1\0\7\11\1\256\20\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\11\11"+
    "\1\257\16\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\3\11\1\260\24\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\3\11\1\261\24\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\30\11\1\0\3\11"+
    "\1\262\3\11\32\0\1\11\1\0\4\11\1\263\23\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\4\11"+
    "\1\264\23\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\16\11\1\265\11\11\1\0\3\11\1\0\3\11"+
    "\32\0\1\11\1\0\5\11\1\266\22\11\1\0\3\11"+
    "\1\0\3\11\43\0\1\267\75\0\1\270\104\0\1\271"+
    "\47\0\1\11\1\0\7\11\1\272\20\11\1\0\3\11"+
    "\1\0\3\11\32\0\1\11\1\0\12\11\1\273\15\11"+
    "\1\0\3\11\1\0\3\11\32\0\1\11\1\0\12\11"+
    "\1\274\15\11\1\0\3\11\1\0\3\11\62\0\1\275"+
    "\43\0\1\11\1\0\30\11\1\0\1\11\1\276\1\11"+
    "\1\0\3\11\32\0\1\11\1\0\30\11\1\0\1\11"+
    "\1\277\1\11\1\0\3\11\32\0\1\11\1\0\10\11"+
    "\1\300\17\11\1\0\3\11\1\0\3\11\65\0\1\301"+
    "\45\0\1\302\77\0\1\303\62\0\1\11\1\0\7\11"+
    "\1\304\20\11\1\0\3\11\1\0\3\11\32\0\1\11"+
    "\1\0\14\11\1\305\13\11\1\0\3\11\1\0\3\11"+
    "\60\0\1\306\45\0\1\11\1\0\7\11\1\307\20\11"+
    "\1\0\3\11\1\0\3\11\41\0\1\310\100\0\1\311"+
    "\74\0\1\312\56\0\1\11\1\0\15\11\1\313\12\11"+
    "\1\0\3\11\1\0\3\11\47\0\1\314\107\0\1\315"+
    "\53\0\1\316\116\0\1\317\76\0\1\320\1\321\41\0"+
    "\1\322\73\0\1\323\113\0\1\324\63\0\1\325\70\0"+
    "\1\326\77\0\1\327\67\0\1\330\67\0\1\331\71\0"+
    "\1\332\73\0\1\333\101\0\1\334\105\0\1\335\62\0"+
    "\1\336\76\0\1\337\62\0\1\340\76\0\1\341\73\0"+
    "\1\342\112\0\1\343\76\0\1\344\51\0\1\345\77\0"+
    "\1\346\71\0\1\347\67\0\1\350\112\0\1\351\53\0"+
    "\1\352\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\2\1\1\11\1\1\1\11"+
    "\15\1\2\11\2\1\4\11\2\1\2\11\3\1\4\11"+
    "\1\0\1\11\1\0\27\1\4\0\7\11\1\0\30\1"+
    "\4\0\1\11\26\1\4\0\7\1\1\11\12\1\1\0"+
    "\1\11\2\0\15\1\3\0\4\1\1\0\4\1\3\0"+
    "\3\1\1\0\3\1\3\0\2\1\1\0\1\1\3\0"+
    "\1\1\2\0\2\11\20\0\2\11\10\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _UnisonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 66: break;
          case 2: 
            { return NEWLINE;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 69: break;
          case 5: 
            { return QUOTE;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return WORDY;
            } 
            // fall through
          case 71: break;
          case 7: 
            { return UNDERSCORE;
            } 
            // fall through
          case 72: break;
          case 8: 
            { return AT;
            } 
            // fall through
          case 73: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 74: break;
          case 10: 
            { return WATCH;
            } 
            // fall through
          case 75: break;
          case 11: 
            { return BRACKET1;
            } 
            // fall through
          case 76: break;
          case 12: 
            { return COLON;
            } 
            // fall through
          case 77: break;
          case 13: 
            { return BRACKET2;
            } 
            // fall through
          case 78: break;
          case 14: 
            { return COMMA;
            } 
            // fall through
          case 79: break;
          case 15: 
            { return PAREN1;
            } 
            // fall through
          case 80: break;
          case 16: 
            { return PAREN2;
            } 
            // fall through
          case 81: break;
          case 17: 
            { return BRACE1;
            } 
            // fall through
          case 82: break;
          case 18: 
            { return BRACE2;
            } 
            // fall through
          case 83: break;
          case 19: 
            { return FORALL2;
            } 
            // fall through
          case 84: break;
          case 20: 
            { return EQUAL;
            } 
            // fall through
          case 85: break;
          case 21: 
            { return PIPE;
            } 
            // fall through
          case 86: break;
          case 22: 
            { return MINUS;
            } 
            // fall through
          case 87: break;
          case 23: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 88: break;
          case 24: 
            { return BACK_QUOTE;
            } 
            // fall through
          case 89: break;
          case 25: 
            { return PLUS;
            } 
            // fall through
          case 90: break;
          case 26: 
            { return MUL;
            } 
            // fall through
          case 91: break;
          case 27: 
            { return STRING;
            } 
            // fall through
          case 92: break;
          case 28: 
            { return IF;
            } 
            // fall through
          case 93: break;
          case 29: 
            { return OPEN;
            } 
            // fall through
          case 94: break;
          case 30: 
            { return CLOSE;
            } 
            // fall through
          case 95: break;
          case 31: 
            { return DOC_OPEN;
            } 
            // fall through
          case 96: break;
          case 32: 
            { return DOC_CLOSE;
            } 
            // fall through
          case 97: break;
          case 33: 
            { return OR;
            } 
            // fall through
          case 98: break;
          case 34: 
            { return AND;
            } 
            // fall through
          case 99: break;
          case 35: 
            { return ARROW;
            } 
            // fall through
          case 100: break;
          case 36: 
            { return USE;
            } 
            // fall through
          case 101: break;
          case 37: 
            { return FOLD;
            } 
            // fall through
          case 102: break;
          case 38: 
            { return ELSE;
            } 
            // fall through
          case 103: break;
          case 39: 
            { return TRUE;
            } 
            // fall through
          case 104: break;
          case 40: 
            { return TYPE;
            } 
            // fall through
          case 105: break;
          case 41: 
            { return THEN;
            } 
            // fall through
          case 106: break;
          case 42: 
            { return WITH;
            } 
            // fall through
          case 107: break;
          case 43: 
            { return TEST_WATCH;
            } 
            // fall through
          case 108: break;
          case 44: 
            { return CASES;
            } 
            // fall through
          case 109: break;
          case 45: 
            { return WHERE;
            } 
            // fall through
          case 110: break;
          case 46: 
            { return MATCH;
            } 
            // fall through
          case 111: break;
          case 47: 
            { return FALSE;
            } 
            // fall through
          case 112: break;
          case 48: 
            { return AT_EVAL;
            } 
            // fall through
          case 113: break;
          case 49: 
            { return UNIQUE;
            } 
            // fall through
          case 114: break;
          case 50: 
            { return SOURCE;
            } 
            // fall through
          case 115: break;
          case 51: 
            { return LAMBDA;
            } 
            // fall through
          case 116: break;
          case 52: 
            { return FORALL1;
            } 
            // fall through
          case 117: break;
          case 53: 
            { return INCLUDE;
            } 
            // fall through
          case 118: break;
          case 54: 
            { return ABILITY;
            } 
            // fall through
          case 119: break;
          case 55: 
            { return EVALUATE;
            } 
            // fall through
          case 120: break;
          case 56: 
            { return TERM_LINK;
            } 
            // fall through
          case 121: break;
          case 57: 
            { return TYPE_LINK;
            } 
            // fall through
          case 122: break;
          case 58: 
            { return SIGNATURE;
            } 
            // fall through
          case 123: break;
          case 59: 
            { return OTHERWISE;
            } 
            // fall through
          case 124: break;
          case 60: 
            { return STRUCTURAL;
            } 
            // fall through
          case 125: break;
          case 61: 
            { return AT_SIGNATURE;
            } 
            // fall through
          case 126: break;
          case 62: 
            { return AT_TYPECHECK;
            } 
            // fall through
          case 127: break;
          case 63: 
            { return SYNTAX_DOC_COLUMN;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return INLINE_SIGNATURE;
            } 
            // fall through
          case 129: break;
          case 65: 
            { return SYNTAX_DOC_UNTITLED_SECTION;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
