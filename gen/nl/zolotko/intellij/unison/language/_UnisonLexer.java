/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.zolotko.intellij.unison.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.zolotko.intellij.unison.language.psi.UnisonElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_UnisonLexer.flex</tt>
 */
public class _UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INSTRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14304 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\141\1\24\45"+
    "\12\1\142\1\12\1\24\1\27\4\12\1\27\1\143\1\144\1\15\1\12\1\15\1\12\1\15\1"+
    "\144\1\70\3\12\1\145\1\1\1\146\1\114\2\1\1\114\5\12\1\26\1\147\1\12\1\150"+
    "\4\12\1\37\1\12\1\151\2\1\1\64\1\12\1\152\1\153\2\12\1\154\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\153\2\1\2\114\1\155\5\1\1\107\2\12\1\145\1\156\1\114"+
    "\2\1\1\157\1\12\1\160\1\41\2\12\1\37\1\1\2\12\1\145\1\1\1\161\1\41\1\12\1"+
    "\152\1\45\5\1\1\162\1\163\14\12\4\1\21\12\1\141\2\12\1\141\1\164\1\12\1\152"+
    "\3\12\1\165\1\166\1\167\1\124\1\166\7\1\1\170\1\1\1\124\6\1\1\171\1\172\1"+
    "\173\1\174\1\175\3\1\1\176\7\1\1\177\137\1\2\12\1\151\2\12\1\151\10\12\1\200"+
    "\1\201\2\12\1\133\3\12\1\202\1\1\1\12\1\112\4\203\4\1\1\126\35\1\1\204\2\1"+
    "\1\205\1\24\4\12\1\206\1\24\4\12\1\134\1\107\1\12\1\152\1\24\4\12\1\151\1"+
    "\1\1\12\1\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1"+
    "\2\12\1\152\20\12\1\124\1\12\1\207\1\1\2\12\1\151\1\126\1\12\1\152\4\12\1"+
    "\37\2\1\1\210\1\211\5\12\1\212\1\12\1\151\1\26\3\1\1\210\1\213\1\12\1\30\1"+
    "\1\3\12\1\145\1\211\2\12\1\145\1\1\1\114\1\1\1\214\1\41\1\12\1\37\1\12\1\112"+
    "\1\1\1\12\1\124\1\47\2\12\1\30\1\126\1\114\1\215\1\216\2\12\1\45\1\1\1\217"+
    "\1\114\1\12\1\220\3\12\1\221\1\222\1\223\1\27\1\65\1\224\1\225\1\203\2\12"+
    "\1\134\1\37\7\12\1\30\1\114\72\12\1\145\1\12\1\226\2\12\1\154\20\1\26\12\1"+
    "\152\6\12\1\76\2\1\1\112\1\227\1\55\1\230\1\231\6\12\1\15\1\1\1\157\25\12"+
    "\1\152\1\1\4\12\1\211\2\12\1\26\2\1\1\154\7\1\1\215\7\12\1\124\1\1\1\114\1"+
    "\24\1\27\1\24\1\27\1\232\4\12\1\151\1\233\1\234\2\1\1\235\1\12\1\13\1\236"+
    "\2\152\2\1\7\12\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\237\2\12"+
    "\1\37\1\12\1\152\2\12\1\240\3\1\11\12\1\152\1\114\2\12\1\240\1\12\1\154\2"+
    "\12\1\26\3\12\1\145\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\241\2\12\1\242"+
    "\1\12\1\37\1\12\1\112\1\12\1\151\4\1\1\12\1\243\1\12\1\37\1\12\1\76\4\1\3"+
    "\12\1\244\4\1\1\70\1\245\1\12\1\145\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1"+
    "\12\1\153\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3"+
    "\12\1\30\3\12\1\30\60\1\1\157\2\12\1\26\2\1\1\64\1\1\1\157\2\12\2\1\1\12\1"+
    "\45\1\114\1\157\1\12\1\112\1\64\1\1\2\12\1\246\1\157\2\12\1\30\1\247\1\250"+
    "\2\1\1\12\1\21\1\154\5\1\1\251\1\252\1\45\2\12\1\151\1\1\1\114\1\72\1\54\1"+
    "\55\1\67\1\1\1\253\1\15\11\1\3\12\1\153\1\254\1\114\2\1\3\12\1\1\1\255\1\114"+
    "\12\1\2\12\1\151\2\1\1\256\2\1\3\12\1\1\1\257\1\114\2\1\2\12\1\27\1\1\1\114"+
    "\3\1\1\12\1\76\1\1\1\114\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1"+
    "\12\1\151\1\1\1\70\1\114\1\1\1\211\1\12\67\1\71\12\1\76\16\1\14\12\1\145\53"+
    "\1\2\12\1\151\75\1\44\12\1\112\33\1\43\12\1\45\1\12\1\151\1\114\6\1\1\12\1"+
    "\152\1\1\3\12\1\1\1\145\1\114\1\157\1\260\1\12\67\1\4\12\1\153\1\70\3\1\1"+
    "\157\4\1\1\70\1\1\76\12\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124"+
    "\1\45\1\76\66\1\5\12\1\215\3\12\1\144\1\261\1\262\1\263\3\12\1\264\1\265\1"+
    "\12\1\266\1\267\1\35\24\12\1\270\1\12\1\35\1\134\1\12\1\134\1\12\1\215\1\12"+
    "\1\215\1\151\1\12\1\151\1\12\1\55\1\12\1\55\1\12\1\271\3\272\14\12\1\153\3"+
    "\1\4\12\1\145\1\114\112\1\1\263\1\12\1\273\1\274\1\275\1\276\1\277\1\300\1"+
    "\301\1\154\1\302\1\154\24\1\55\12\1\112\2\1\103\12\1\153\15\12\1\152\150\12"+
    "\1\15\25\1\41\12\1\152\36\1");

  /* The ZZ_CMAP_A table has 3120 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\17\1\5\1\0\1\20\1\21\1\23\1\7\1\75\1"+
    "\76\1\24\1\27\1\74\1\25\1\11\1\33\1\10\11\15\1\35\1\0\1\30\1\26\1\31\1\0\1"+
    "\63\2\16\1\70\10\16\1\71\6\16\1\64\1\16\1\67\5\16\1\72\1\6\1\73\1\22\1\14"+
    "\1\102\1\47\1\53\1\46\1\61\1\42\1\60\1\62\1\55\1\40\1\16\1\65\1\50\1\56\1"+
    "\37\1\57\1\52\1\41\1\45\1\43\1\44\1\36\1\13\1\54\1\66\1\51\1\16\1\77\1\34"+
    "\1\100\1\32\13\0\1\12\12\0\1\12\4\0\1\12\5\0\27\12\1\0\12\12\4\0\14\12\16"+
    "\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\2\0\4\12\1\0\1\12\6\0\1\12\1\0"+
    "\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0\13\12\10\0\6\12\1\0\26\12\2\0\1\12\6"+
    "\0\10\12\10\0\13\12\5\0\3\12\15\0\12\4\4\0\6\12\1\0\1\12\17\0\2\12\7\0\2\12"+
    "\12\4\3\12\2\0\2\12\1\0\16\12\15\0\11\12\13\0\1\12\16\0\12\4\6\12\4\0\2\12"+
    "\4\0\1\12\5\0\6\12\4\0\1\12\11\0\1\12\3\0\1\12\7\0\11\12\7\0\5\12\1\0\10\12"+
    "\6\0\26\12\3\0\1\12\2\0\1\12\7\0\12\12\4\0\12\4\1\12\4\0\10\12\2\0\2\12\2"+
    "\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12\20\0\1\12\15\0\2\12\1\0\1\12"+
    "\5\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\17\0\4\12\1\0\1\12\7\0\12\4"+
    "\2\0\3\12\20\0\11\12\1\0\2\12\1\0\2\12\1\0\5\12\3\0\1\12\2\0\1\12\30\0\1\12"+
    "\13\0\10\12\2\0\1\12\3\0\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\3\0\3\12\3\0\14\12\13\0\10\12\1\0\2\12\10\0\3\12\5\0\1"+
    "\12\4\0\10\12\1\0\6\12\1\0\5\12\3\0\1\12\3\0\2\12\15\0\13\12\2\0\1\12\6\0"+
    "\3\12\10\0\1\12\12\0\6\12\5\0\22\12\3\0\10\12\1\0\11\12\1\0\1\12\2\0\7\12"+
    "\11\0\1\12\1\0\2\12\14\0\12\4\7\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12"+
    "\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\4\12\1\0\2\12\11"+
    "\0\1\12\2\0\5\12\1\0\1\12\11\0\12\4\2\0\14\12\1\0\24\12\13\0\5\12\22\0\7\12"+
    "\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12\4\0\15\12\14\0\1\12\1\0\6\12\1\0\1\12"+
    "\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\1\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12\2\0\6\12\2\0\15\12\2\0\1\12"+
    "\1\0\10\12\7\0\15\12\1\0\6\12\23\0\1\12\4\0\1\12\3\0\5\12\2\0\22\12\1\0\1"+
    "\12\5\0\17\12\1\0\16\12\2\0\5\12\13\0\14\12\13\0\1\12\15\0\7\12\7\0\16\12"+
    "\15\0\2\12\12\4\3\0\3\12\11\0\4\12\1\0\4\12\3\0\2\12\11\0\10\12\1\0\1\12\1"+
    "\0\1\12\1\0\1\12\1\0\6\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\5\0\1\12\15\0\1\12\2\0\1\12\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\4\0"+
    "\2\12\13\0\1\101\17\0\5\12\6\0\4\12\3\0\2\12\14\0\10\12\7\0\10\12\1\0\7\12"+
    "\6\0\2\12\12\0\5\12\5\0\2\12\3\0\7\12\6\0\3\12\12\4\2\12\13\0\11\12\2\0\27"+
    "\12\2\0\7\12\1\0\3\12\1\0\4\12\1\0\4\12\2\0\6\12\3\0\1\12\1\0\1\12\2\0\5\12"+
    "\1\0\12\12\12\4\5\12\1\0\3\12\1\0\10\12\4\0\7\12\3\0\1\12\3\0\2\12\1\0\1\12"+
    "\3\0\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\3\0\6\12\2\0\6\12\2\0\6\12"+
    "\11\0\7\12\4\0\5\12\3\0\5\12\5\0\1\12\1\0\10\12\1\0\5\12\1\0\1\12\1\0\2\12"+
    "\1\0\2\12\1\0\12\12\6\0\12\12\2\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14\12"+
    "\1\0\16\12\1\0\2\12\1\0\2\12\1\0\10\12\6\0\4\12\4\0\16\12\2\0\1\12\1\0\14"+
    "\12\1\0\2\12\3\0\1\12\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\3\12\1\0\12"+
    "\12\3\0\1\12\12\0\4\12\13\0\12\4\1\12\1\0\1\12\3\0\7\12\1\0\1\12\1\0\4\12"+
    "\1\0\17\12\1\0\2\12\14\0\3\12\7\0\4\12\11\0\2\12\1\0\1\12\20\0\4\12\10\0\1"+
    "\12\13\0\10\12\5\0\3\12\2\0\1\12\2\0\2\12\2\0\4\12\1\0\14\12\1\0\1\12\1\0"+
    "\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0\14\12\1\0\4\12\1\0\5\12\1"+
    "\0\1\12\3\0\14\12\2\0\13\12\1\0\10\12\2\0\22\4\1\0\2\12\1\0\1\12\2\0\1\12"+
    "\1\0\12\12\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\0\3\12\1\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1"+
    "\0\2\12\1\0\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0\12\12\1"+
    "\0\5\12\1\0\3\12\1\0\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\14\10\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\0\1\37\1\0\1\40\1\0\1\41\1\42"+
    "\1\43\3\10\1\44\23\10\4\0\1\45\1\46\1\47"+
    "\1\50\1\0\1\51\1\10\1\52\25\10\5\0\3\10"+
    "\1\53\6\10\1\54\1\55\1\56\3\10\1\57\5\10"+
    "\5\0\7\10\1\60\2\10\1\61\2\10\1\62\1\63"+
    "\1\10\1\64\1\10\1\0\1\65\3\0\1\66\5\10"+
    "\1\67\3\10\1\70\1\10\1\71\4\0\1\72\3\10"+
    "\1\0\2\10\1\73\1\10\4\0\1\74\3\10\1\75"+
    "\1\76\1\10\4\0\1\77\2\10\1\100\4\0\1\101"+
    "\1\10\1\0\1\102\1\103\1\0\2\10\2\0\2\10"+
    "\2\0\2\10\2\0\2\10\2\0\2\10\2\0\1\10"+
    "\1\104\1\105\1\106\10\10\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\206\0\206\0\u010c\0\206"+
    "\0\206\0\u014f\0\u0192\0\u01d5\0\u0218\0\u025b\0\206\0\u029e"+
    "\0\206\0\206\0\206\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\206\0\206\0\206\0\206\0\u0711"+
    "\0\u0754\0\206\0\206\0\u0797\0\206\0\u07da\0\u0218\0\u014f"+
    "\0\u081d\0\u0860\0\206\0\u08a3\0\206\0\206\0\206\0\u08e6"+
    "\0\u0929\0\u096c\0\u0192\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb"+
    "\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb"+
    "\0\u0f2e\0\u0f71\0\206\0\206\0\206\0\206\0\u0fb4\0\206"+
    "\0\u0ff7\0\u0192\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1"+
    "\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9"+
    "\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u0192"+
    "\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u0192\0\u1963"+
    "\0\u0192\0\u19a6\0\u19e9\0\u1a2c\0\u0192\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d"+
    "\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\206\0\u1ee2"+
    "\0\u1f25\0\u0192\0\u1f68\0\u1fab\0\u0192\0\u0192\0\u1fee\0\u0192"+
    "\0\u2031\0\u2074\0\206\0\u20b7\0\u20fa\0\u213d\0\u0192\0\u2180"+
    "\0\u21c3\0\u2206\0\u2249\0\u228c\0\u0192\0\u22cf\0\u2312\0\u2355"+
    "\0\u0192\0\u2398\0\u0192\0\u23db\0\u241e\0\u2461\0\u24a4\0\u0192"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u0192\0\u2679"+
    "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u0192\0\u27c8\0\u280b\0\u284e"+
    "\0\u0192\0\u0192\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u0192"+
    "\0\u29e0\0\u2a23\0\u0192\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u0192"+
    "\0\u2b72\0\u2bb5\0\206\0\206\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1"+
    "\0\u2d04\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1"+
    "\0\u3134\0\u3177\0\u0192\0\206\0\u31ba\0\u31fd\0\u3240\0\u3283"+
    "\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2\0\u0192";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\7\1\12\2\13\1\14\1\7\1\13\1\15\3\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\3\1\23\2\3"+
    "\1\24\1\25\1\26\1\13\1\27\1\13\1\30\1\31"+
    "\1\32\1\13\1\33\1\34\1\35\3\13\1\36\1\13"+
    "\1\37\1\40\1\41\2\13\1\42\6\13\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\5\54"+
    "\1\55\1\56\74\54\105\0\1\5\104\0\1\7\3\0"+
    "\1\7\4\0\1\7\77\0\2\13\2\0\1\13\1\57"+
    "\16\0\25\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\25\13\1\0\6\13\23\0\2\61\2\0"+
    "\1\61\17\0\25\61\1\0\6\61\31\0\1\62\105\0"+
    "\1\63\104\0\1\64\3\0\1\65\105\0\1\66\141\0"+
    "\1\67\17\0\1\13\1\60\5\13\1\57\16\0\1\13"+
    "\1\70\3\13\1\71\17\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\1\13\1\72\20\13\1\73"+
    "\2\13\1\0\6\13\21\0\1\13\1\60\1\13\1\74"+
    "\3\13\1\57\16\0\12\13\1\75\12\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\2\13\1\76"+
    "\3\13\1\77\4\13\1\100\5\13\1\101\3\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\4\13"+
    "\1\102\2\13\1\103\3\13\1\104\3\13\1\105\5\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\11\13\1\106\13\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\15\13\1\107\7\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\11\13\1\110"+
    "\13\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\2\13\1\111\14\13\1\112\5\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\11\13\1\113"+
    "\13\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\6\13\1\114\16\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\11\13\1\115\7\13\1\116"+
    "\3\13\1\0\6\13\51\0\1\117\1\0\1\120\1\121"+
    "\1\122\73\0\1\123\144\0\1\124\103\0\1\125\2\0"+
    "\5\54\2\0\74\54\5\0\4\126\2\0\1\126\23\0"+
    "\1\126\3\0\3\126\1\0\1\126\3\0\1\126\4\0"+
    "\1\126\32\0\1\61\2\0\4\61\17\0\25\61\1\0"+
    "\6\61\32\0\1\127\106\0\1\130\65\0\1\13\1\60"+
    "\5\13\1\57\16\0\2\13\1\131\22\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\4\13\1\132"+
    "\20\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\10\13\1\133\14\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\11\13\1\134\13\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\5\13"+
    "\1\135\17\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\24\13\1\136\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\7\13\1\137\15\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\1\13"+
    "\1\140\23\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\1\141\24\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\5\13\1\142\1\13\1\143"+
    "\15\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\1\144\24\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\14\13\1\145\10\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\4\13\1\146"+
    "\20\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\5\13\1\147\17\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\2\13\1\150\22\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\20\13"+
    "\1\151\4\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\6\13\1\152\16\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\4\13\1\153\20\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\6\13\1\154\16\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\17\13\1\155\5\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\12\13\1\156"+
    "\12\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\7\13\1\157\15\13\1\0\6\13\50\0\1\160"+
    "\56\0\1\161\127\0\1\162\113\0\1\163\53\0\1\164"+
    "\70\0\1\13\1\60\5\13\1\57\16\0\3\13\1\165"+
    "\21\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\12\13\1\166\12\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\12\13\1\167\12\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\4\13"+
    "\1\170\20\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\1\13\1\171\23\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\1\172\24\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\6\13"+
    "\1\173\16\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\7\13\1\174\15\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\6\13\1\175\16\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\20\13\1\176\4\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\4\13\1\177\20\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\4\13\1\200"+
    "\20\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\1\13\1\201\23\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\4\13\1\202\20\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\12\13"+
    "\1\203\12\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\15\13\1\204\7\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\17\13\1\205\5\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\7\13\1\206\15\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\10\13\1\207\14\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\4\13\1\210"+
    "\20\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\5\13\1\211\17\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\11\13\1\212\13\13\1\0"+
    "\6\13\61\0\1\213\101\0\1\214\115\0\1\215\72\0"+
    "\1\216\53\0\1\217\67\0\1\13\1\60\5\13\1\57"+
    "\16\0\1\220\24\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\1\221\24\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\1\222\24\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\11\13"+
    "\1\223\13\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\10\13\1\224\14\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\11\13\1\225\13\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\10\13\1\226\14\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\11\0\1\227\4\0\25\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\25\13\1\0"+
    "\5\13\1\230\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\25\13\1\0\5\13\1\231\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\5\13\1\232\17\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\2\13\1\233\22\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\23\13\1\234\1\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\4\13\1\235\20\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\17\13\1\236"+
    "\5\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\7\13\1\237\15\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\4\13\1\240\20\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\12\13"+
    "\1\241\12\13\1\0\6\13\51\0\1\242\112\0\1\243"+
    "\71\0\1\244\105\0\1\245\64\0\1\246\66\0\1\13"+
    "\1\60\5\13\1\57\16\0\4\13\1\247\20\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\23\13"+
    "\1\250\1\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\11\13\1\251\13\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\6\13\1\252\16\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\6\13\1\253\16\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\25\13\1\0\2\13\1\254\3\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\4\13\1\255"+
    "\20\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\2\13\1\256\22\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\2\13\1\257\22\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\6\13"+
    "\1\260\16\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\11\13\1\261\13\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\16\13\1\262\6\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\12\13\1\263\12\13\1\0\6\13\50\0\1\264\112\0"+
    "\1\265\101\0\1\266\61\0\1\267\65\0\1\13\1\60"+
    "\5\13\1\57\16\0\4\13\1\270\20\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\6\13\1\271"+
    "\16\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\1\272\24\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\1\273\24\13\1\0\6\13\21\0"+
    "\1\13\1\274\5\13\1\57\16\0\25\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\1\13\1\275"+
    "\23\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\1\13\1\276\23\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\13\13\1\277\11\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\2\13"+
    "\1\300\22\13\1\0\6\13\53\0\1\301\104\0\1\302"+
    "\113\0\1\303\53\0\1\304\64\0\1\13\1\60\5\13"+
    "\1\57\16\0\4\13\1\305\20\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\7\13\1\306\15\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\7\13\1\307\15\13\1\0\6\13\23\0\2\13\2\0"+
    "\1\13\1\57\16\0\23\13\1\310\1\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\25\13\1\0"+
    "\1\13\1\311\4\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\25\13\1\0\1\13\1\312\4\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\5\13\1\313\17\13\1\0"+
    "\6\13\75\0\1\314\54\0\1\315\106\0\1\316\67\0"+
    "\1\317\63\0\1\13\1\60\5\13\1\57\16\0\4\13"+
    "\1\320\20\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\11\13\1\321\13\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\21\13\1\322\3\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\4\13\1\323\20\13\1\0\6\13\51\0\1\324\107\0"+
    "\1\325\103\0\1\326\64\0\1\327\62\0\1\13\1\60"+
    "\5\13\1\57\16\0\12\13\1\330\12\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\10\13\1\331"+
    "\14\13\1\0\6\13\73\0\1\332\62\0\1\333\125\0"+
    "\1\334\46\0\1\335\61\0\1\13\1\60\5\13\1\57"+
    "\16\0\25\13\1\0\3\13\1\336\1\337\1\13\50\0"+
    "\1\340\54\0\1\341\101\0\1\13\1\60\5\13\1\57"+
    "\16\0\1\13\1\342\23\13\1\0\6\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\21\13\1\343\3\13\1\0"+
    "\6\13\60\0\1\344\65\0\1\345\60\0\1\13\1\60"+
    "\5\13\1\57\16\0\6\13\1\346\16\13\1\0\6\13"+
    "\21\0\1\13\1\60\5\13\1\57\16\0\12\13\1\347"+
    "\12\13\1\0\6\13\55\0\1\350\44\0\1\351\104\0"+
    "\1\13\1\60\5\13\1\57\16\0\2\13\1\352\22\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\1\353\24\13\1\0\6\13\47\0\1\354\77\0\1\355"+
    "\57\0\1\13\1\60\5\13\1\57\16\0\6\13\1\356"+
    "\16\13\1\0\6\13\21\0\1\13\1\60\5\13\1\57"+
    "\16\0\20\13\1\357\4\13\1\0\6\13\56\0\1\360"+
    "\71\0\1\361\56\0\1\13\1\60\5\13\1\57\16\0"+
    "\12\13\1\362\12\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\1\13\1\363\23\13\1\0\6\13"+
    "\53\0\1\364\75\0\1\365\55\0\1\13\1\60\5\13"+
    "\1\57\16\0\4\13\1\366\20\13\1\0\6\13\30\0"+
    "\1\57\73\0\1\13\1\60\5\13\1\57\16\0\23\13"+
    "\1\367\1\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\25\13\1\0\1\370\5\13\21\0\1\13"+
    "\1\60\5\13\1\57\16\0\4\13\1\371\20\13\1\0"+
    "\6\13\21\0\1\13\1\60\5\13\1\57\16\0\10\13"+
    "\1\372\14\13\1\0\6\13\21\0\1\13\1\60\5\13"+
    "\1\57\16\0\6\13\1\373\16\13\1\0\6\13\21\0"+
    "\1\13\1\60\5\13\1\57\16\0\2\13\1\374\22\13"+
    "\1\0\6\13\21\0\1\13\1\60\5\13\1\57\16\0"+
    "\21\13\1\375\3\13\1\0\6\13\21\0\1\13\1\60"+
    "\5\13\1\57\16\0\1\13\1\376\23\13\1\0\6\13"+
    "\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13333];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\1\1\2\11\5\1\1\11"+
    "\1\1\3\11\20\1\4\11\2\1\2\11\1\1\1\11"+
    "\1\1\2\0\1\1\1\0\1\11\1\0\3\11\27\1"+
    "\4\0\4\11\1\0\1\11\27\1\5\0\26\1\5\0"+
    "\7\1\1\11\12\1\1\0\1\11\3\0\15\1\4\0"+
    "\4\1\1\0\4\1\4\0\7\1\4\0\4\1\4\0"+
    "\2\1\1\0\2\11\1\0\2\1\2\0\2\1\2\0"+
    "\2\1\2\0\2\1\2\0\2\1\2\0\2\1\1\11"+
    "\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[254];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _UnisonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 72: break;
          case 2: 
            { return NEWLINE;
            } 
            // fall through
          case 73: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 74: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 75: break;
          case 5: 
            { yybegin(INSTRING);
                                      return DOUBLE_QUOTE;
            } 
            // fall through
          case 76: break;
          case 6: 
            { return QUOTE;
            } 
            // fall through
          case 77: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 78: break;
          case 8: 
            { return WORDY;
            } 
            // fall through
          case 79: break;
          case 9: 
            { return UNDERSCORE;
            } 
            // fall through
          case 80: break;
          case 10: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 81: break;
          case 11: 
            { return MUL;
            } 
            // fall through
          case 82: break;
          case 12: 
            { return MINUS;
            } 
            // fall through
          case 83: break;
          case 13: 
            { return EQUAL;
            } 
            // fall through
          case 84: break;
          case 14: 
            { return PLUS;
            } 
            // fall through
          case 85: break;
          case 15: 
            { return WATCH;
            } 
            // fall through
          case 86: break;
          case 16: 
            { return PIPE;
            } 
            // fall through
          case 87: break;
          case 17: 
            { return COLON;
            } 
            // fall through
          case 88: break;
          case 18: 
            { return AT;
            } 
            // fall through
          case 89: break;
          case 19: 
            { return BRACKET1;
            } 
            // fall through
          case 90: break;
          case 20: 
            { return BRACKET2;
            } 
            // fall through
          case 91: break;
          case 21: 
            { return COMMA;
            } 
            // fall through
          case 92: break;
          case 22: 
            { return PAREN1;
            } 
            // fall through
          case 93: break;
          case 23: 
            { return PAREN2;
            } 
            // fall through
          case 94: break;
          case 24: 
            { return BRACE1;
            } 
            // fall through
          case 95: break;
          case 25: 
            { return BRACE2;
            } 
            // fall through
          case 96: break;
          case 26: 
            { return FORALL2;
            } 
            // fall through
          case 97: break;
          case 27: 
            { return BACK_QUOTE;
            } 
            // fall through
          case 98: break;
          case 28: 
            { return STRING_SPAN;
            } 
            // fall through
          case 99: break;
          case 29: 
            { yybegin(YYINITIAL);
                                    return DOUBLE_QUOTE;
            } 
            // fall through
          case 100: break;
          case 30: 
            { return STRING_BAD_CHARACTER;
            } 
            // fall through
          case 101: break;
          case 31: 
            { return BLANK;
            } 
            // fall through
          case 102: break;
          case 32: 
            { return AND;
            } 
            // fall through
          case 103: break;
          case 33: 
            { return ARROW;
            } 
            // fall through
          case 104: break;
          case 34: 
            { return OR;
            } 
            // fall through
          case 105: break;
          case 35: 
            { return CLOSE;
            } 
            // fall through
          case 106: break;
          case 36: 
            { return IF;
            } 
            // fall through
          case 107: break;
          case 37: 
            { return OPEN;
            } 
            // fall through
          case 108: break;
          case 38: 
            { return DOC_OPEN;
            } 
            // fall through
          case 109: break;
          case 39: 
            { return DOC_CLOSE;
            } 
            // fall through
          case 110: break;
          case 40: 
            { return STRING_ESCAPE_SEQUENCE;
            } 
            // fall through
          case 111: break;
          case 41: 
            { return FOLD;
            } 
            // fall through
          case 112: break;
          case 42: 
            { return USE;
            } 
            // fall through
          case 113: break;
          case 43: 
            { return ELSE;
            } 
            // fall through
          case 114: break;
          case 44: 
            { return TRUE;
            } 
            // fall through
          case 115: break;
          case 45: 
            { return TYPE;
            } 
            // fall through
          case 116: break;
          case 46: 
            { return THEN;
            } 
            // fall through
          case 117: break;
          case 47: 
            { return WITH;
            } 
            // fall through
          case 118: break;
          case 48: 
            { return TEST_WATCH;
            } 
            // fall through
          case 119: break;
          case 49: 
            { return CASES;
            } 
            // fall through
          case 120: break;
          case 50: 
            { return WHERE;
            } 
            // fall through
          case 121: break;
          case 51: 
            { return MATCH;
            } 
            // fall through
          case 122: break;
          case 52: 
            { return FALSE;
            } 
            // fall through
          case 123: break;
          case 53: 
            { return AT_EVAL;
            } 
            // fall through
          case 124: break;
          case 54: 
            { return UNIQUE;
            } 
            // fall through
          case 125: break;
          case 55: 
            { return SOURCE;
            } 
            // fall through
          case 126: break;
          case 56: 
            { return LAMBDA;
            } 
            // fall through
          case 127: break;
          case 57: 
            { return FORALL1;
            } 
            // fall through
          case 128: break;
          case 58: 
            { return INCLUDE;
            } 
            // fall through
          case 129: break;
          case 59: 
            { return ABILITY;
            } 
            // fall through
          case 130: break;
          case 60: 
            { return EVALUATE;
            } 
            // fall through
          case 131: break;
          case 61: 
            { return TERM_LINK;
            } 
            // fall through
          case 132: break;
          case 62: 
            { return TYPE_LINK;
            } 
            // fall through
          case 133: break;
          case 63: 
            { return SIGNATURE;
            } 
            // fall through
          case 134: break;
          case 64: 
            { return OTHERWISE;
            } 
            // fall through
          case 135: break;
          case 65: 
            { return STRUCTURAL;
            } 
            // fall through
          case 136: break;
          case 66: 
            { return AT_SIGNATURE;
            } 
            // fall through
          case 137: break;
          case 67: 
            { return AT_TYPECHECK;
            } 
            // fall through
          case 138: break;
          case 68: 
            { return SYNTAX_DOC_COLUMN;
            } 
            // fall through
          case 139: break;
          case 69: 
            { return INLINE_SIGNATURE;
            } 
            // fall through
          case 140: break;
          case 70: 
            { return SYMBOLY;
            } 
            // fall through
          case 141: break;
          case 71: 
            { return SYNTAX_DOC_UNTITLED_SECTION;
            } 
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
