/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package nl.zolotko.intellij.unison.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static nl.zolotko.intellij.unison.language.psi.UnisonElementTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_UnisonLexer.flex</tt>
 */
public class _UnisonLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 14304 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12\1\13\6\14\1\15\23\14\1\16"+
    "\1\14\1\17\1\20\12\14\1\21\10\11\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\2\11\1\14\1\36\3\11\1\37\10\11\1\40\1\41\5\14\1\42\1\43"+
    "\11\11\1\44\2\11\1\45\5\11\1\46\4\11\1\47\1\50\4\11\51\14\1\51\3\14\1\52\1"+
    "\53\4\14\1\54\12\11\1\55\u0381\11");

  /* The ZZ_CMAP_Y table has 2944 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\10\1\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\23\12\12\1\24\1\12"+
    "\1\25\1\24\1\12\1\26\4\1\1\12\1\27\1\30\2\1\2\12\1\27\1\1\1\31\1\24\5\12\1"+
    "\32\1\33\1\34\1\1\1\35\1\12\1\1\1\36\5\12\1\37\1\40\1\41\1\12\1\27\1\42\1"+
    "\12\1\43\1\44\1\1\1\12\1\45\4\1\1\12\1\46\4\1\1\47\2\12\1\50\1\1\1\51\1\52"+
    "\1\24\1\53\1\54\1\55\1\56\1\57\1\60\1\52\1\15\1\61\1\54\1\55\1\62\1\1\1\63"+
    "\1\64\1\65\1\66\1\21\1\55\1\67\1\1\1\70\1\52\1\71\1\72\1\54\1\55\1\67\1\1"+
    "\1\60\1\52\1\40\1\73\1\74\1\75\1\76\1\1\1\70\1\64\1\1\1\77\1\35\1\55\1\50"+
    "\1\1\1\100\1\52\1\1\1\101\1\35\1\55\1\102\1\1\1\57\1\52\1\103\1\77\1\35\1"+
    "\12\1\104\1\57\1\105\1\52\1\106\1\107\1\110\1\12\1\111\1\112\1\1\1\64\1\1"+
    "\1\24\2\12\1\113\1\112\1\114\2\1\1\115\1\116\1\117\1\120\1\121\1\122\2\1\1"+
    "\70\1\1\1\114\1\1\1\123\1\12\1\124\1\1\1\125\7\1\2\12\1\27\1\126\1\114\1\127"+
    "\1\130\1\131\1\132\1\114\2\12\1\133\2\12\1\134\24\12\1\135\1\136\2\12\1\135"+
    "\2\12\1\137\1\140\1\13\3\12\1\140\3\12\1\27\2\1\1\12\1\1\5\12\1\141\1\24\45"+
    "\12\1\142\1\12\1\24\1\27\4\12\1\27\1\143\1\144\1\15\1\12\1\15\1\12\1\15\1"+
    "\144\1\70\3\12\1\145\1\1\1\146\1\114\2\1\1\114\5\12\1\26\1\147\1\12\1\150"+
    "\4\12\1\37\1\12\1\151\2\1\1\64\1\12\1\152\1\153\2\12\1\154\1\12\1\76\1\114"+
    "\2\1\1\12\1\112\3\12\1\153\2\1\2\114\1\155\5\1\1\107\2\12\1\145\1\156\1\114"+
    "\2\1\1\157\1\12\1\160\1\41\2\12\1\37\1\1\2\12\1\145\1\1\1\161\1\41\1\12\1"+
    "\152\1\45\5\1\1\162\1\163\14\12\4\1\21\12\1\141\2\12\1\141\1\164\1\12\1\152"+
    "\3\12\1\165\1\166\1\167\1\124\1\166\7\1\1\170\1\1\1\124\6\1\1\171\1\172\1"+
    "\173\1\174\1\175\3\1\1\176\7\1\1\177\137\1\2\12\1\151\2\12\1\151\10\12\1\200"+
    "\1\201\2\12\1\133\3\12\1\202\1\1\1\12\1\112\4\203\4\1\1\126\35\1\1\204\2\1"+
    "\1\205\1\24\4\12\1\206\1\24\4\12\1\134\1\107\1\12\1\152\1\24\4\12\1\151\1"+
    "\1\1\12\1\27\3\1\1\12\40\1\133\12\1\37\4\1\135\12\1\37\2\1\10\12\1\124\4\1"+
    "\2\12\1\152\20\12\1\124\1\12\1\207\1\1\2\12\1\151\1\126\1\12\1\152\4\12\1"+
    "\37\2\1\1\210\1\211\5\12\1\212\1\12\1\151\1\26\3\1\1\210\1\213\1\12\1\30\1"+
    "\1\3\12\1\145\1\211\2\12\1\145\1\1\1\114\1\1\1\214\1\41\1\12\1\37\1\12\1\112"+
    "\1\1\1\12\1\124\1\47\2\12\1\30\1\126\1\114\1\215\1\216\2\12\1\45\1\1\1\217"+
    "\1\114\1\12\1\220\3\12\1\221\1\222\1\223\1\27\1\65\1\224\1\225\1\203\2\12"+
    "\1\134\1\37\7\12\1\30\1\114\72\12\1\145\1\12\1\226\2\12\1\154\20\1\26\12\1"+
    "\152\6\12\1\76\2\1\1\112\1\227\1\55\1\230\1\231\6\12\1\15\1\1\1\157\25\12"+
    "\1\152\1\1\4\12\1\211\2\12\1\26\2\1\1\154\7\1\1\215\7\12\1\124\1\1\1\114\1"+
    "\24\1\27\1\24\1\27\1\232\4\12\1\151\1\233\1\234\2\1\1\235\1\12\1\13\1\236"+
    "\2\152\2\1\7\12\1\27\30\1\1\12\1\124\3\12\1\70\2\1\2\12\1\1\1\12\1\237\2\12"+
    "\1\37\1\12\1\152\2\12\1\240\3\1\11\12\1\152\1\114\2\12\1\240\1\12\1\154\2"+
    "\12\1\26\3\12\1\145\11\1\23\12\1\112\1\12\1\37\1\26\11\1\1\241\2\12\1\242"+
    "\1\12\1\37\1\12\1\112\1\12\1\151\4\1\1\12\1\243\1\12\1\37\1\12\1\76\4\1\3"+
    "\12\1\244\4\1\1\70\1\245\1\12\1\145\2\1\1\12\1\124\1\12\1\124\2\1\1\123\1"+
    "\12\1\153\1\1\3\12\1\37\1\12\1\37\1\12\1\30\1\12\1\15\6\1\4\12\1\45\3\1\3"+
    "\12\1\30\3\12\1\30\60\1\1\157\2\12\1\26\2\1\1\64\1\1\1\157\2\12\2\1\1\12\1"+
    "\45\1\114\1\157\1\12\1\112\1\64\1\1\2\12\1\246\1\157\2\12\1\30\1\247\1\250"+
    "\2\1\1\12\1\21\1\154\5\1\1\251\1\252\1\45\2\12\1\151\1\1\1\114\1\72\1\54\1"+
    "\55\1\67\1\1\1\253\1\15\11\1\3\12\1\153\1\254\1\114\2\1\3\12\1\1\1\255\1\114"+
    "\12\1\2\12\1\151\2\1\1\256\2\1\3\12\1\1\1\257\1\114\2\1\2\12\1\27\1\1\1\114"+
    "\3\1\1\12\1\76\1\1\1\114\26\1\4\12\1\114\1\126\34\1\3\12\1\45\20\1\1\55\1"+
    "\12\1\151\1\1\1\70\1\114\1\1\1\211\1\12\67\1\71\12\1\76\16\1\14\12\1\145\53"+
    "\1\2\12\1\151\75\1\44\12\1\112\33\1\43\12\1\45\1\12\1\151\1\114\6\1\1\12\1"+
    "\152\1\1\3\12\1\1\1\145\1\114\1\157\1\260\1\12\67\1\4\12\1\153\1\70\3\1\1"+
    "\157\4\1\1\70\1\1\76\12\1\124\1\1\57\12\1\30\20\1\1\15\77\1\6\12\1\27\1\124"+
    "\1\45\1\76\66\1\5\12\1\215\3\12\1\144\1\261\1\262\1\263\3\12\1\264\1\265\1"+
    "\12\1\266\1\267\1\35\24\12\1\270\1\12\1\35\1\134\1\12\1\134\1\12\1\215\1\12"+
    "\1\215\1\151\1\12\1\151\1\12\1\55\1\12\1\55\1\12\1\271\3\272\14\12\1\153\3"+
    "\1\4\12\1\145\1\114\112\1\1\263\1\12\1\273\1\274\1\275\1\276\1\277\1\300\1"+
    "\301\1\154\1\302\1\154\24\1\55\12\1\112\2\1\103\12\1\153\15\12\1\152\150\12"+
    "\1\15\25\1\41\12\1\152\36\1");

  /* The ZZ_CMAP_A table has 3120 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\67\1\66\3\0\1\63\1\65\1\54\1\55\1\72"+
    "\1\71\1\53\1\64\1\43\1\0\12\7\1\51\2\0\1\61\1\47\1\0\1\36\2\10\1\45\10\10"+
    "\1\46\6\10\1\37\1\10\1\44\5\10\1\50\1\0\1\52\1\0\1\6\1\70\1\22\1\26\1\21\1"+
    "\34\1\15\1\33\1\35\1\30\1\13\1\10\1\40\1\23\1\31\1\12\1\32\1\25\1\14\1\20"+
    "\1\16\1\17\1\11\1\41\1\27\1\42\1\24\1\10\1\56\1\62\1\57\14\0\1\5\12\0\1\5"+
    "\4\0\1\5\5\0\27\5\1\0\12\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2"+
    "\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\23\5\1\0\13\5\10\0"+
    "\6\5\1\0\26\5\2\0\1\5\6\0\10\5\10\0\13\5\5\0\3\5\15\0\12\4\4\0\6\5\1\0\1\5"+
    "\17\0\2\5\7\0\2\5\12\4\3\5\2\0\2\5\1\0\16\5\15\0\11\5\13\0\1\5\16\0\12\4\6"+
    "\5\4\0\2\5\4\0\1\5\5\0\6\5\4\0\1\5\11\0\1\5\3\0\1\5\7\0\11\5\7\0\5\5\1\0\10"+
    "\5\6\0\26\5\3\0\1\5\2\0\1\5\7\0\12\5\4\0\12\4\1\5\4\0\10\5\2\0\2\5\2\0\26"+
    "\5\1\0\7\5\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5\1\0\1\5\5\0\6\5\4\0\2"+
    "\5\1\0\2\5\1\0\2\5\1\0\2\5\17\0\4\5\1\0\1\5\7\0\12\4\2\0\3\5\20\0\11\5\1\0"+
    "\2\5\1\0\2\5\1\0\5\5\3\0\1\5\2\0\1\5\30\0\1\5\13\0\10\5\2\0\1\5\3\0\1\5\1"+
    "\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\13"+
    "\0\10\5\1\0\2\5\10\0\3\5\5\0\1\5\4\0\10\5\1\0\6\5\1\0\5\5\3\0\1\5\3\0\2\5"+
    "\15\0\13\5\2\0\1\5\6\0\3\5\10\0\1\5\12\0\6\5\5\0\22\5\3\0\10\5\1\0\11\5\1"+
    "\0\1\5\2\0\7\5\11\0\1\5\1\0\2\5\14\0\12\4\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5"+
    "\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0\2\5\11"+
    "\0\1\5\2\0\5\5\1\0\1\5\11\0\12\4\2\0\14\5\1\0\24\5\13\0\5\5\22\0\7\5\4\0\4"+
    "\5\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5\1\0\6\5\1\0\1\5\5\0\1\5\2\0\13"+
    "\5\1\0\15\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\1\5\1\0\4\5\2\0\7\5\1\0\1"+
    "\5\1\0\4\5\2\0\16\5\2\0\6\5\2\0\15\5\2\0\1\5\1\0\10\5\7\0\15\5\1\0\6\5\23"+
    "\0\1\5\4\0\1\5\3\0\5\5\2\0\22\5\1\0\1\5\5\0\17\5\1\0\16\5\2\0\5\5\13\0\14"+
    "\5\13\0\1\5\15\0\7\5\7\0\16\5\15\0\2\5\12\4\3\0\3\5\11\0\4\5\1\0\4\5\3\0\2"+
    "\5\11\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\6\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7"+
    "\5\3\0\4\5\2\0\6\5\5\0\1\5\15\0\1\5\2\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5"+
    "\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5\4\0\2"+
    "\5\13\0\1\60\17\0\5\5\6\0\4\5\3\0\2\5\14\0\10\5\7\0\10\5\1\0\7\5\6\0\2\5\12"+
    "\0\5\5\5\0\2\5\3\0\7\5\6\0\3\5\12\4\2\5\13\0\11\5\2\0\27\5\2\0\7\5\1\0\3\5"+
    "\1\0\4\5\1\0\4\5\2\0\6\5\3\0\1\5\1\0\1\5\2\0\5\5\1\0\12\5\12\4\5\5\1\0\3\5"+
    "\1\0\10\5\4\0\7\5\3\0\1\5\3\0\2\5\1\0\1\5\3\0\2\5\2\0\5\5\2\0\1\5\1\0\1\5"+
    "\30\0\3\5\3\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5\4\0\5\5\3\0\5\5\5\0\1\5\1\0\10"+
    "\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\12\5\6\0\12\5\2\0\6\5\2\0\6\5\2\0\6"+
    "\5\2\0\3\5\3\0\14\5\1\0\16\5\1\0\2\5\1\0\2\5\1\0\10\5\6\0\4\5\4\0\16\5\2\0"+
    "\1\5\1\0\14\5\1\0\2\5\3\0\1\5\2\0\4\5\1\0\2\5\12\0\10\5\6\0\6\5\1\0\3\5\1"+
    "\0\12\5\3\0\1\5\12\0\4\5\13\0\12\4\1\5\1\0\1\5\3\0\7\5\1\0\1\5\1\0\4\5\1\0"+
    "\17\5\1\0\2\5\14\0\3\5\7\0\4\5\11\0\2\5\1\0\1\5\20\0\4\5\10\0\1\5\13\0\10"+
    "\5\5\0\3\5\2\0\1\5\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0\21\5\1\0\4"+
    "\5\2\0\10\5\1\0\7\5\1\0\14\5\1\0\4\5\1\0\5\5\1\0\1\5\3\0\14\5\2\0\13\5\1\0"+
    "\10\5\2\0\22\4\1\0\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6"+
    "\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1"+
    "\5\1\0\12\5\1\0\5\5\1\0\3\5\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\14\5"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\1\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\3\5\1\34"+
    "\23\5\4\0\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\0\1\5\1\44\25\5\4\0\1\45\2\5"+
    "\1\46\7\5\1\47\1\50\1\51\3\5\1\52\5\5"+
    "\4\0\7\5\1\53\2\5\1\54\2\5\1\55\1\56"+
    "\1\5\1\57\1\5\1\0\1\60\2\0\1\61\5\5"+
    "\1\62\3\5\1\63\1\5\1\64\3\0\1\65\3\5"+
    "\1\0\2\5\1\66\1\5\3\0\1\67\2\5\1\0"+
    "\1\70\1\71\1\5\3\0\1\72\1\5\1\0\1\73"+
    "\3\0\1\74\2\0\1\75\1\76\20\0\1\77\1\100"+
    "\10\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\73\0\73\0\261\0\354\0\73"+
    "\0\u0127\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\73\0\73\0\u0426"+
    "\0\u0461\0\73\0\73\0\73\0\73\0\u049c\0\u04d7\0\73"+
    "\0\73\0\u0512\0\u054d\0\u0588\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\u05c3\0\u05fe\0\u0639\0\354\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\u0bc1\0\u0bfc\0\354\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf"+
    "\0\73\0\u11fa\0\u1235\0\354\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\354\0\u140d\0\354\0\u1448\0\u1483"+
    "\0\u14be\0\354\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\73\0\u18a9\0\u18e4\0\354\0\u191f\0\u195a"+
    "\0\354\0\354\0\u1995\0\354\0\u19d0\0\u1a0b\0\73\0\u1a46"+
    "\0\u1a81\0\354\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\354"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\354\0\u1c94\0\354\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\354\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\354\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\354\0\u1fce\0\u2009"+
    "\0\u2044\0\354\0\354\0\u207f\0\u20ba\0\u20f5\0\u2130\0\354"+
    "\0\u216b\0\u21a6\0\354\0\u21e1\0\u221c\0\u2257\0\354\0\u2292"+
    "\0\u22cd\0\73\0\73\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\73\0\73\0\u26b8\0\u26f3\0\u272e"+
    "\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\6"+
    "\1\7\1\11\1\7\1\12\1\7\1\13\1\14\1\15"+
    "\1\7\1\16\1\17\1\20\3\7\1\21\1\7\1\22"+
    "\1\23\1\24\2\7\1\25\4\7\1\26\3\7\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\75\0\1\4\74\0\1\6\2\0"+
    "\1\6\71\0\30\7\1\0\4\7\1\0\3\7\32\0"+
    "\4\7\1\53\3\7\1\54\17\7\1\0\4\7\1\0"+
    "\3\7\32\0\4\7\1\55\20\7\1\56\2\7\1\0"+
    "\4\7\1\0\3\7\32\0\15\7\1\57\12\7\1\0"+
    "\2\7\1\60\1\7\1\0\3\7\32\0\5\7\1\61"+
    "\3\7\1\62\4\7\1\63\5\7\1\64\3\7\1\0"+
    "\4\7\1\0\3\7\32\0\7\7\1\65\2\7\1\66"+
    "\3\7\1\67\3\7\1\70\5\7\1\0\4\7\1\0"+
    "\3\7\32\0\14\7\1\71\13\7\1\0\4\7\1\0"+
    "\3\7\32\0\20\7\1\72\7\7\1\0\4\7\1\0"+
    "\3\7\32\0\14\7\1\73\13\7\1\0\4\7\1\0"+
    "\3\7\32\0\5\7\1\74\14\7\1\75\5\7\1\0"+
    "\4\7\1\0\3\7\32\0\14\7\1\76\13\7\1\0"+
    "\4\7\1\0\3\7\32\0\11\7\1\77\16\7\1\0"+
    "\4\7\1\0\3\7\32\0\14\7\1\100\7\7\1\101"+
    "\3\7\1\0\4\7\1\0\3\7\37\0\1\102\1\0"+
    "\1\103\1\104\1\105\124\0\1\106\73\0\1\107\76\0"+
    "\1\110\73\0\1\111\75\0\1\112\73\0\1\113\56\0"+
    "\1\114\14\0\1\115\14\0\5\7\1\116\22\7\1\0"+
    "\4\7\1\0\3\7\32\0\7\7\1\117\20\7\1\0"+
    "\4\7\1\0\3\7\32\0\13\7\1\120\14\7\1\0"+
    "\4\7\1\0\3\7\32\0\10\7\1\121\17\7\1\0"+
    "\4\7\1\0\3\7\32\0\14\7\1\122\13\7\1\0"+
    "\4\7\1\0\3\7\32\0\27\7\1\123\1\0\4\7"+
    "\1\0\3\7\32\0\12\7\1\124\15\7\1\0\4\7"+
    "\1\0\3\7\32\0\4\7\1\125\23\7\1\0\4\7"+
    "\1\0\3\7\32\0\3\7\1\126\24\7\1\0\4\7"+
    "\1\0\3\7\32\0\10\7\1\127\1\7\1\130\15\7"+
    "\1\0\4\7\1\0\3\7\32\0\3\7\1\131\24\7"+
    "\1\0\4\7\1\0\3\7\32\0\17\7\1\132\10\7"+
    "\1\0\4\7\1\0\3\7\32\0\7\7\1\133\20\7"+
    "\1\0\4\7\1\0\3\7\32\0\10\7\1\134\17\7"+
    "\1\0\4\7\1\0\3\7\32\0\5\7\1\135\22\7"+
    "\1\0\4\7\1\0\3\7\32\0\23\7\1\136\4\7"+
    "\1\0\4\7\1\0\3\7\32\0\11\7\1\137\16\7"+
    "\1\0\4\7\1\0\3\7\32\0\7\7\1\140\20\7"+
    "\1\0\4\7\1\0\3\7\32\0\11\7\1\141\16\7"+
    "\1\0\4\7\1\0\3\7\32\0\22\7\1\142\5\7"+
    "\1\0\4\7\1\0\3\7\32\0\15\7\1\143\12\7"+
    "\1\0\4\7\1\0\3\7\32\0\12\7\1\144\15\7"+
    "\1\0\4\7\1\0\3\7\36\0\1\145\121\0\1\146"+
    "\44\0\1\147\103\0\1\150\132\0\1\151\14\0\6\7"+
    "\1\152\21\7\1\0\4\7\1\0\3\7\32\0\15\7"+
    "\1\153\12\7\1\0\4\7\1\0\3\7\32\0\7\7"+
    "\1\154\20\7\1\0\4\7\1\0\3\7\32\0\15\7"+
    "\1\155\12\7\1\0\4\7\1\0\3\7\32\0\4\7"+
    "\1\156\23\7\1\0\4\7\1\0\3\7\32\0\3\7"+
    "\1\157\24\7\1\0\4\7\1\0\3\7\32\0\11\7"+
    "\1\160\16\7\1\0\4\7\1\0\3\7\32\0\12\7"+
    "\1\161\15\7\1\0\4\7\1\0\3\7\32\0\11\7"+
    "\1\162\16\7\1\0\4\7\1\0\3\7\32\0\23\7"+
    "\1\163\4\7\1\0\4\7\1\0\3\7\32\0\7\7"+
    "\1\164\20\7\1\0\4\7\1\0\3\7\32\0\7\7"+
    "\1\165\20\7\1\0\4\7\1\0\3\7\32\0\4\7"+
    "\1\166\23\7\1\0\4\7\1\0\3\7\32\0\7\7"+
    "\1\167\20\7\1\0\4\7\1\0\3\7\32\0\15\7"+
    "\1\170\12\7\1\0\4\7\1\0\3\7\32\0\20\7"+
    "\1\171\7\7\1\0\4\7\1\0\3\7\32\0\22\7"+
    "\1\172\5\7\1\0\4\7\1\0\3\7\32\0\12\7"+
    "\1\173\15\7\1\0\4\7\1\0\3\7\32\0\13\7"+
    "\1\174\14\7\1\0\4\7\1\0\3\7\32\0\7\7"+
    "\1\175\20\7\1\0\4\7\1\0\3\7\32\0\10\7"+
    "\1\176\17\7\1\0\4\7\1\0\3\7\32\0\14\7"+
    "\1\177\13\7\1\0\4\7\1\0\3\7\47\0\1\200"+
    "\71\0\1\201\105\0\1\202\62\0\1\203\53\0\3\7"+
    "\1\204\24\7\1\0\4\7\1\0\3\7\32\0\3\7"+
    "\1\205\24\7\1\0\4\7\1\0\3\7\32\0\3\7"+
    "\1\206\24\7\1\0\4\7\1\0\3\7\32\0\14\7"+
    "\1\207\13\7\1\0\4\7\1\0\3\7\32\0\13\7"+
    "\1\210\14\7\1\0\4\7\1\0\3\7\32\0\14\7"+
    "\1\211\13\7\1\0\4\7\1\0\3\7\32\0\13\7"+
    "\1\212\14\7\1\0\4\7\1\0\3\7\32\0\30\7"+
    "\1\0\4\7\1\0\3\7\1\213\31\0\30\7\1\0"+
    "\4\7\1\0\2\7\1\214\32\0\30\7\1\0\4\7"+
    "\1\0\2\7\1\215\32\0\10\7\1\216\17\7\1\0"+
    "\4\7\1\0\3\7\32\0\5\7\1\217\22\7\1\0"+
    "\4\7\1\0\3\7\32\0\26\7\1\220\1\7\1\0"+
    "\4\7\1\0\3\7\32\0\7\7\1\221\20\7\1\0"+
    "\4\7\1\0\3\7\32\0\22\7\1\222\5\7\1\0"+
    "\4\7\1\0\3\7\32\0\12\7\1\223\15\7\1\0"+
    "\4\7\1\0\3\7\32\0\7\7\1\224\20\7\1\0"+
    "\4\7\1\0\3\7\32\0\15\7\1\225\12\7\1\0"+
    "\4\7\1\0\3\7\37\0\1\226\102\0\1\227\61\0"+
    "\1\230\75\0\1\231\63\0\7\7\1\232\20\7\1\0"+
    "\4\7\1\0\3\7\32\0\26\7\1\233\1\7\1\0"+
    "\4\7\1\0\3\7\32\0\14\7\1\234\13\7\1\0"+
    "\4\7\1\0\3\7\32\0\11\7\1\235\16\7\1\0"+
    "\4\7\1\0\3\7\32\0\11\7\1\236\16\7\1\0"+
    "\4\7\1\0\3\7\32\0\30\7\1\0\3\7\1\237"+
    "\1\0\3\7\32\0\7\7\1\240\20\7\1\0\4\7"+
    "\1\0\3\7\32\0\5\7\1\241\22\7\1\0\4\7"+
    "\1\0\3\7\32\0\5\7\1\242\22\7\1\0\4\7"+
    "\1\0\3\7\32\0\11\7\1\243\16\7\1\0\4\7"+
    "\1\0\3\7\32\0\14\7\1\244\13\7\1\0\4\7"+
    "\1\0\3\7\32\0\21\7\1\245\6\7\1\0\4\7"+
    "\1\0\3\7\32\0\15\7\1\246\12\7\1\0\4\7"+
    "\1\0\3\7\36\0\1\247\102\0\1\250\71\0\1\251"+
    "\57\0\7\7\1\252\20\7\1\0\4\7\1\0\3\7"+
    "\32\0\11\7\1\253\16\7\1\0\4\7\1\0\3\7"+
    "\32\0\3\7\1\254\24\7\1\0\4\7\1\0\3\7"+
    "\32\0\3\7\1\255\24\7\1\0\4\7\1\0\3\7"+
    "\32\0\30\7\1\0\4\7\1\256\3\7\32\0\4\7"+
    "\1\257\23\7\1\0\4\7\1\0\3\7\32\0\4\7"+
    "\1\260\23\7\1\0\4\7\1\0\3\7\32\0\16\7"+
    "\1\261\11\7\1\0\4\7\1\0\3\7\32\0\5\7"+
    "\1\262\22\7\1\0\4\7\1\0\3\7\41\0\1\263"+
    "\74\0\1\264\103\0\1\265\50\0\7\7\1\266\20\7"+
    "\1\0\4\7\1\0\3\7\32\0\12\7\1\267\15\7"+
    "\1\0\4\7\1\0\3\7\32\0\12\7\1\270\15\7"+
    "\1\0\4\7\1\0\3\7\60\0\1\271\44\0\30\7"+
    "\1\0\1\7\1\272\2\7\1\0\3\7\32\0\30\7"+
    "\1\0\1\7\1\273\2\7\1\0\3\7\32\0\10\7"+
    "\1\274\17\7\1\0\4\7\1\0\3\7\63\0\1\275"+
    "\44\0\1\276\76\0\1\277\63\0\7\7\1\300\20\7"+
    "\1\0\4\7\1\0\3\7\32\0\14\7\1\301\13\7"+
    "\1\0\4\7\1\0\3\7\56\0\1\302\46\0\7\7"+
    "\1\303\20\7\1\0\4\7\1\0\3\7\37\0\1\304"+
    "\77\0\1\305\73\0\1\306\57\0\15\7\1\307\12\7"+
    "\1\0\4\7\1\0\3\7\45\0\1\310\106\0\1\311"+
    "\52\0\1\312\115\0\1\313\76\0\1\314\1\315\37\0"+
    "\1\316\72\0\1\317\112\0\1\320\62\0\1\321\67\0"+
    "\1\322\76\0\1\323\66\0\1\324\66\0\1\325\70\0"+
    "\1\326\72\0\1\327\100\0\1\330\104\0\1\331\61\0"+
    "\1\332\75\0\1\333\61\0\1\334\75\0\1\335\72\0"+
    "\1\336\111\0\1\337\75\0\1\340\50\0\1\341\76\0"+
    "\1\342\70\0\1\343\66\0\1\344\111\0\1\345\52\0"+
    "\1\346\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\2\1\1\11\15\1\2\11"+
    "\2\1\4\11\2\1\2\11\3\1\6\11\27\1\4\0"+
    "\7\11\1\0\27\1\4\0\1\11\26\1\4\0\7\1"+
    "\1\11\12\1\1\0\1\11\2\0\15\1\3\0\4\1"+
    "\1\0\4\1\3\0\3\1\1\0\3\1\3\0\2\1"+
    "\1\0\1\1\3\0\1\1\2\0\2\11\20\0\2\11"+
    "\10\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[230];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _UnisonLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _UnisonLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 66: break;
          case 2: 
            { return NEWLINE;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 68: break;
          case 4: 
            { return NUMBER;
            } 
            // fall through
          case 69: break;
          case 5: 
            { return WORDY;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return UNDERSCORE;
            } 
            // fall through
          case 71: break;
          case 7: 
            { return AT;
            } 
            // fall through
          case 72: break;
          case 8: 
            { return DOT;
            } 
            // fall through
          case 73: break;
          case 9: 
            { return WATCH;
            } 
            // fall through
          case 74: break;
          case 10: 
            { return BRACKET1;
            } 
            // fall through
          case 75: break;
          case 11: 
            { return COLON;
            } 
            // fall through
          case 76: break;
          case 12: 
            { return BRACKET2;
            } 
            // fall through
          case 77: break;
          case 13: 
            { return COMMA;
            } 
            // fall through
          case 78: break;
          case 14: 
            { return PAREN1;
            } 
            // fall through
          case 79: break;
          case 15: 
            { return PAREN2;
            } 
            // fall through
          case 80: break;
          case 16: 
            { return BRACE1;
            } 
            // fall through
          case 81: break;
          case 17: 
            { return BRACE2;
            } 
            // fall through
          case 82: break;
          case 18: 
            { return FORALL2;
            } 
            // fall through
          case 83: break;
          case 19: 
            { return EQUAL;
            } 
            // fall through
          case 84: break;
          case 20: 
            { return PIPE;
            } 
            // fall through
          case 85: break;
          case 21: 
            { return MINUS;
            } 
            // fall through
          case 86: break;
          case 22: 
            { return QUOTE;
            } 
            // fall through
          case 87: break;
          case 23: 
            { return DOUBLE_QUOTE;
            } 
            // fall through
          case 88: break;
          case 24: 
            { return EXCLAMATION_MARK;
            } 
            // fall through
          case 89: break;
          case 25: 
            { return BACK_QUOTE;
            } 
            // fall through
          case 90: break;
          case 26: 
            { return PLUS;
            } 
            // fall through
          case 91: break;
          case 27: 
            { return MUL;
            } 
            // fall through
          case 92: break;
          case 28: 
            { return IF;
            } 
            // fall through
          case 93: break;
          case 29: 
            { return OPEN;
            } 
            // fall through
          case 94: break;
          case 30: 
            { return CLOSE;
            } 
            // fall through
          case 95: break;
          case 31: 
            { return DOC_OPEN;
            } 
            // fall through
          case 96: break;
          case 32: 
            { return DOC_CLOSE;
            } 
            // fall through
          case 97: break;
          case 33: 
            { return OR;
            } 
            // fall through
          case 98: break;
          case 34: 
            { return AND;
            } 
            // fall through
          case 99: break;
          case 35: 
            { return ARROW;
            } 
            // fall through
          case 100: break;
          case 36: 
            { return USE;
            } 
            // fall through
          case 101: break;
          case 37: 
            { return FOLD;
            } 
            // fall through
          case 102: break;
          case 38: 
            { return ELSE;
            } 
            // fall through
          case 103: break;
          case 39: 
            { return TRUE;
            } 
            // fall through
          case 104: break;
          case 40: 
            { return TYPE;
            } 
            // fall through
          case 105: break;
          case 41: 
            { return THEN;
            } 
            // fall through
          case 106: break;
          case 42: 
            { return WITH;
            } 
            // fall through
          case 107: break;
          case 43: 
            { return TEST_WATCH;
            } 
            // fall through
          case 108: break;
          case 44: 
            { return CASES;
            } 
            // fall through
          case 109: break;
          case 45: 
            { return WHERE;
            } 
            // fall through
          case 110: break;
          case 46: 
            { return MATCH;
            } 
            // fall through
          case 111: break;
          case 47: 
            { return FALSE;
            } 
            // fall through
          case 112: break;
          case 48: 
            { return AT_EVAL;
            } 
            // fall through
          case 113: break;
          case 49: 
            { return UNIQUE;
            } 
            // fall through
          case 114: break;
          case 50: 
            { return SOURCE;
            } 
            // fall through
          case 115: break;
          case 51: 
            { return LAMBDA;
            } 
            // fall through
          case 116: break;
          case 52: 
            { return FORALL1;
            } 
            // fall through
          case 117: break;
          case 53: 
            { return INCLUDE;
            } 
            // fall through
          case 118: break;
          case 54: 
            { return ABILITY;
            } 
            // fall through
          case 119: break;
          case 55: 
            { return EVALUATE;
            } 
            // fall through
          case 120: break;
          case 56: 
            { return TERM_LINK;
            } 
            // fall through
          case 121: break;
          case 57: 
            { return TYPE_LINK;
            } 
            // fall through
          case 122: break;
          case 58: 
            { return SIGNATURE;
            } 
            // fall through
          case 123: break;
          case 59: 
            { return OTHERWISE;
            } 
            // fall through
          case 124: break;
          case 60: 
            { return STRUCTURAL;
            } 
            // fall through
          case 125: break;
          case 61: 
            { return AT_SIGNATURE;
            } 
            // fall through
          case 126: break;
          case 62: 
            { return AT_TYPECHECK;
            } 
            // fall through
          case 127: break;
          case 63: 
            { return SYNTAX_DOC_COLUMN;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return INLINE_SIGNATURE;
            } 
            // fall through
          case 129: break;
          case 65: 
            { return SYNTAX_DOC_UNTITLED_SECTION;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
